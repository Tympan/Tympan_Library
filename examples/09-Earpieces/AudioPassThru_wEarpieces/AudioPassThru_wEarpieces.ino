/*
 * AudioPassThru_Earpieces
 *
 * Created: Chip Audette, OpenAudio, Aug 2021
 * Purpose: Demonstrate basic audio pass-thru from Tympan earpieces using the Tympan
 *     and the Tympan Earpiece Shield
 *     
 * This simple example has no App integration and no SD card writing.
 * 
 * This example is built upon AudioPassThru_Quad, which is the basic demonstration for the
 * Tympan AICShield.  It turns out that the EarpieceShield is a special case of an AICShield,
 * which is why it is good place to start from. 
 * 
 * Note that this simple example also NOT use the EarpieceMixer class.  The EarpieceMixer 
 * class would greatly simplify the handling and mixing of all the different microphone 
 * signals that are generated by the earpieces.  But, my hiding certain implementation
 * details, the EarpieceMixer class can make it harder to learn the basics of how the system
 * is working.  That's what this example here is for.  But, once you are beyond this basic
 * example, we strongly recommend that you use the EarpieceMixer.  For an example, of the 
 * EarpieceMixer class, see "TrebleBoost_wComp_wEarpieces_wApp"
 *
 * License: MIT License, Use At Your Own Risk
 *
 */

//here are the libraries that we need
#include <Tympan_Library.h>  //include the Tympan Library

//set the sample rate and block size
const float sample_rate_Hz = 44100.0f ;  //24000 to 44117 to 96000 (or other frequencies in the table in AudioOutputI2S_F32)
const int audio_block_samples = 128;     //do not make bigger than audio_block_SAMPLES from AudioStream.h (which is 128)  Must be 128 for SD recording.
AudioSettings_F32 audio_settings(sample_rate_Hz, audio_block_samples);

// define classes to control the Tympan and the AIC_Shield
Tympan           myTympan(TympanRev::E, audio_settings);         //choose TympanRev::D or TympanRev::E
EarpieceShield   earpieceShield(TympanRev::E, AICShieldRev::A);  //Note that EarpieceShield is defined in the Tympan_Libarary in AICShield.h 

// define audio classes
AudioInputI2SQuad_F32         i2s_in(audio_settings);        //Digital audio *from* the Tympan AIC.
AudioOutputI2SQuad_F32        i2s_out(audio_settings);       //Digital audio *to* the Tympan AIC.  Always list last to minimize latency

// Define audio connections.  Remember that, since we add the EarpieceShield, we actually now have four inputs and four outputs.
//     How do we want to connect them all?
// 
// Assuming that we are using the earpieces, remember that earpiece has a front and rear microphone.  Also, each earpiece has
//     a single speaker (reciever).  There are two more independent outputs that are simply connected to the headphone jack 
//     on the main Tympan board.  How do these map to the input channel numbers and the output channel numbers?
//
// We tried to make it easier by giving each of these connections a name so that you don't have to remember numbers:
//
//     * We have four microphones across the two earpieces.  Here are the names for their channel numbers:
//           EarpieceShield::PDM_LEFT_FRONT
//           EarpieceShield::PDM_LEFT_REAR
//           EarpieceShield::PDM_RIGHT_FRONT
//           EarpieceShield::PDM_RIGHT_REEAR
//
//     * We have four outputs, two in the earpieces (which are driven by the EarpieceShield) and two more via the headphone
//       jack on the main Tympan board.  Here are the names for their channel numbers:
//           EarpieceShield::OUTPUT_LEFT_EARPIECE
//           EarpieceShield::OUTPUT_RIGHT_EARPIECE
//           EarpieceShield::OUTPUT_LEFT_TYMPAN
//           EarpieceShield::OUTPUT_RIGHT_TYMPAN

#if 1
  // Here is a set of connections that maps the **front** microphones of the earpieces to both sets of outputs
  AudioConnection_F32  patchCord1(i2s_in, EarpieceShield::PDM_LEFT_FRONT, i2s_out,  EarpieceShield::OUTPUT_LEFT_EARPIECE); //send to the earpiece
  AudioConnection_F32  patchCord2(i2s_in, EarpieceShield::PDM_RIGHT_FRONT, i2s_out, EarpieceShield::OUTPUT_RIGHT_EARPIECE);//send to the earpiece
  AudioConnection_F32  patchCord3(i2s_in, EarpieceShield::PDM_LEFT_FRONT, i2s_out,  EarpieceShield::OUTPUT_LEFT_TYMPAN);   //send the same thing to the Tympan headphone jack
  AudioConnection_F32  patchCord4(i2s_in, EarpieceShield::PDM_RIGHT_FRONT, i2s_out, EarpieceShield::OUTPUT_RIGHT_TYMPAN);  //send the same thing to the Tympan headphone jack
#else
  // Or, here is a set of connectios that maps the **rear** microphones of the earpieces to both sets of outputs
  AudioConnection_F32  patchCord1(i2s_in, EarpieceShield::PDM_LEFT_REAR, i2s_out,  EarpieceShield::OUTPUT_LEFT_EARPIECE);  //send to the earpiece
  AudioConnection_F32  patchCord2(i2s_in, EarpieceShield::PDM_RIGHT_REAR, i2s_out, EarpieceShield::OUTPUT_RIGHT_EARPIECE); //send to the earpiece
  AudioConnection_F32  patchCord3(i2s_in, EarpieceShield::PDM_LEFT_REAR, i2s_out,  EarpieceShield::OUTPUT_LEFT_TYMPAN);    //send the same thing to the Tympan headphone jack
  AudioConnection_F32  patchCord4(i2s_in, EarpieceShield::PDM_RIGHT_REAR, i2s_out, EarpieceShield::OUTPUT_RIGHT_TYMPAN);   //send the same thing to the Tympan headphone jack
#endif
  
// define the setup() function, the function that is called once when the device is booting
void setup(void)
{
  //begin the serial comms (for debugging)
  myTympan.beginBothSerial();   delay(1000);
  Serial.println("AudioPassThru_Earpieces: Starting setup()...");

  //allocate the dynamic memory for audio processing blocks
  AudioMemory_F32(20,audio_settings); 

  //Enable the Tympan and AIC shields to start the audio flowing!
  myTympan.enable(); 
  earpieceShield.enable();

  if (true) {
    //Use the Tympan Earpieces
    Serial.println("setup(): Using Tympan Earpieces as Inputs");
    myTympan.enableDigitalMicInputs(true);
    earpieceShield.enableDigitalMicInputs(true);
  } else {
    //Use the PCB mics on the main Tympan board (for debugging only)
    Serial.println("setup(): Using Tympan Built-In PCB Mics as Inputs");
    myTympan.inputSelect(TYMPAN_INPUT_ON_BOARD_MIC);     // use the on board microphones (only on main board, not on AIC shield)
    myTympan.setInputGain_dB(15.0); 
  }
  
  //Set the desired volume levels
  myTympan.volume_dB(0.0);      // headphone amplifier.  -63.6 to +24 dB in 0.5dB steps.
  earpieceShield.volume_dB(0.0);     // headphone amplifier.  -63.6 to +24 dB in 0.5dB steps.
  
  Serial.println("Setup complete.");
  myTympan.setAmberLED(true);  //light up the LED just to show that setup is complete
}

void loop(void)
{
  // Nothing to do - just looping input to output
  delay(2000);
  printCPUandMemoryMessage();
}

void printCPUandMemoryMessage(void) {
    Serial.print("CPU Cur/Pk: ");
    Serial.print(audio_settings.processorUsage(),1);
    Serial.print("%/");
    Serial.print(audio_settings.processorUsageMax(),1);
    Serial.print("%, ");
    Serial.print("MEM Cur/Pk: ");
    Serial.print(AudioMemoryUsage_F32());
    Serial.print("/");
    Serial.print(AudioMemoryUsageMax_F32());
    Serial.println();
}
